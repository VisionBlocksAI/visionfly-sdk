{"version":3,"file":"next.modern.mjs","sources":["../src/visionfly-react.js","../src/visionfly-next.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from \"react\";\nimport VisionFly from \"./visionfly-core\";\n\n// Create VisionFly context\nconst VisionFlyContext = createContext(null);\n\n/**\n * VisionFly Provider component\n * @param {Object} props - Component props\n * @param {Object} props.config - VisionFly configuration\n * @param {React.ReactNode} props.children - Child components\n */\nexport function VisionFlyProvider({ config, children }) {\n  const [client] = useState(() => new VisionFly(config));\n  const [ready, setReady] = useState(false);\n\n  // Initialize the client\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Trigger authentication\n        await client._ensureAuthenticated();\n        setReady(true);\n      } catch (error) {\n        console.error(\"Failed to initialize VisionFly client:\", error);\n      }\n    };\n\n    init();\n  }, [client]);\n\n  // Context value\n  const contextValue = {\n    client,\n    ready,\n  };\n\n  return (\n    <VisionFlyContext.Provider value={contextValue}>\n      {children}\n    </VisionFlyContext.Provider>\n  );\n}\n\n/**\n * Hook to access VisionFly client\n * @returns {Object} VisionFly context\n */\nexport function useVisionFly() {\n  const context = useContext(VisionFlyContext);\n\n  if (!context) {\n    throw new Error(\"useVisionFly must be used within a VisionFlyProvider\");\n  }\n\n  return context;\n}\n\n/**\n * Image component with optimization\n * @param {Object} props - Component props\n */\nexport function VFImage({\n  src,\n  width,\n  height,\n  quality,\n  format,\n  blur,\n  sharpen,\n  brightness,\n  contrast,\n  saturation,\n  hue,\n  alt = \"\",\n  className = \"\",\n  style = {},\n  loading = \"lazy\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get optimized image URL\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    let isMounted = true;\n    setIsLoading(true);\n\n    const loadImage = async () => {\n      try {\n        const url = await client.getImageUrl({\n          src,\n          width,\n          height,\n          quality,\n          format,\n          blur,\n          sharpen,\n          brightness,\n          contrast,\n          saturation,\n          hue,\n        });\n\n        if (isMounted) {\n          setImageUrl(url);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Failed to load image:\", err);\n          setError(err);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadImage();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    client,\n    ready,\n    src,\n    width,\n    height,\n    quality,\n    format,\n    blur,\n    sharpen,\n    brightness,\n    contrast,\n    saturation,\n    hue,\n  ]);\n\n  // Placeholder while loading\n  if (isLoading) {\n    return (\n      <div\n        className={`vf-image-placeholder ${className}`}\n        style={{\n          width: width ? `${width}px` : \"100%\",\n          height: height ? `${height}px` : \"auto\",\n          backgroundColor: \"#f0f0f0\",\n          ...style,\n        }}\n        {...restProps}\n      />\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div\n        className={`vf-image-error ${className}`}\n        style={{\n          width: width ? `${width}px` : \"100%\",\n          height: height ? `${height}px` : \"auto\",\n          backgroundColor: \"#ff5555\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\",\n          ...style,\n        }}\n        {...restProps}\n      >\n        Error loading image\n      </div>\n    );\n  }\n\n  // Render optimized image\n  return (\n    <img\n      src={imageUrl}\n      alt={alt}\n      width={width}\n      height={height}\n      loading={loading}\n      className={`vf-image ${className}`}\n      style={style}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * Responsive image component with srcset\n * @param {Object} props - Component props\n */\nexport function VFResponsiveImage({\n  src,\n  widths,\n  sizes,\n  quality,\n  format,\n  alt = \"\",\n  className = \"\",\n  style = {},\n  loading = \"lazy\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [srcsetData, setSrcsetData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get srcset data\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    let isMounted = true;\n    setIsLoading(true);\n\n    const loadSrcset = async () => {\n      try {\n        const data = await client.getSrcSet({\n          src,\n          widths,\n          format,\n          quality,\n        });\n\n        if (isMounted) {\n          setSrcsetData(data);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Failed to load srcset:\", err);\n          setError(err);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadSrcset();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    client,\n    ready,\n    src,\n    widths && JSON.stringify(widths),\n    sizes,\n    quality,\n    format,\n  ]);\n\n  // Placeholder while loading\n  if (isLoading) {\n    return (\n      <div\n        className={`vf-image-placeholder ${className}`}\n        style={{\n          width: \"100%\",\n          height: \"300px\",\n          backgroundColor: \"#f0f0f0\",\n          ...style,\n        }}\n        {...restProps}\n      />\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div\n        className={`vf-image-error ${className}`}\n        style={{\n          width: \"100%\",\n          height: \"300px\",\n          backgroundColor: \"#ff5555\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\",\n          ...style,\n        }}\n        {...restProps}\n      >\n        Error loading image\n      </div>\n    );\n  }\n\n  // Render responsive image\n  return (\n    <img\n      src={srcsetData.default}\n      srcSet={srcsetData.srcset}\n      sizes={sizes || srcsetData.sizes}\n      alt={alt}\n      loading={loading}\n      className={`vf-responsive-image ${className}`}\n      style={style}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * Image uploader component\n * @param {Object} props - Component props\n */\nexport function VFUploader({\n  projectId,\n  onUpload,\n  onError,\n  publicId,\n  multiple = false,\n  className = \"\",\n  style = {},\n  buttonClassName = \"\",\n  buttonStyle = {},\n  buttonText = \"Upload Image\",\n  children,\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef(null);\n\n  // Handle file selection\n  const handleFileChange = useCallback(\n    async (event) => {\n      const files = event.target.files;\n      if (!files || files.length === 0) return;\n\n      setIsUploading(true);\n\n      try {\n        // Handle multiple files\n        if (multiple) {\n          const results = await Promise.all(\n            Array.from(files).map((file) =>\n              client.uploadImage({\n                file,\n                projectId,\n                publicId: publicId || undefined,\n              })\n            )\n          );\n\n          setIsUploading(false);\n          if (onUpload) onUpload(results);\n        }\n        // Handle single file\n        else {\n          const result = await client.uploadImage({\n            file: files[0],\n            projectId,\n            publicId: publicId || undefined,\n          });\n\n          setIsUploading(false);\n          if (onUpload) onUpload(result);\n        }\n\n        // Clear the file input\n        if (fileInputRef.current) {\n          fileInputRef.current.value = \"\";\n        }\n      } catch (err) {\n        setIsUploading(false);\n        console.error(\"Upload failed:\", err);\n        if (onError) onError(err);\n      }\n    },\n    [client, projectId, publicId, multiple, onUpload, onError]\n  );\n\n  // Custom button or default\n  const uploadButton = children || (\n    <button\n      type=\"button\"\n      className={`vf-upload-button ${buttonClassName}`}\n      style={buttonStyle}\n      disabled={isUploading || !ready}\n    >\n      {isUploading ? \"Uploading...\" : buttonText}\n    </button>\n  );\n\n  return (\n    <div className={`vf-uploader ${className}`} style={style} {...restProps}>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        multiple={multiple}\n        onChange={handleFileChange}\n        style={{ display: \"none\" }}\n        id=\"vf-file-input\"\n      />\n      <label htmlFor=\"vf-file-input\">{uploadButton}</label>\n    </div>\n  );\n}\n\n// Export everything\nexport default {\n  VisionFlyProvider,\n  useVisionFly,\n  VFImage,\n  VFResponsiveImage,\n  VFUploader,\n};\n","import { useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport { useVisionFly } from \"./visionfly-react\";\n\n/**\n * VisionFly enhanced Next.js Image component\n * @param {Object} props - Component props\n */\nexport function VFNextImage({\n  src,\n  width,\n  height,\n  quality,\n  format,\n  blur,\n  sharpen,\n  brightness,\n  contrast,\n  saturation,\n  hue,\n  alt = \"\",\n  placeholder = \"blur\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [blurDataUrl, setBlurDataUrl] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Generate tiny preview for blur placeholder\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    const loadImage = async () => {\n      try {\n        // Get optimized image URL\n        const url = await client.getImageUrl({\n          src,\n          width,\n          height,\n          quality,\n          format,\n          blur,\n          sharpen,\n          brightness,\n          contrast,\n          saturation,\n          hue,\n        });\n\n        setImageUrl(url);\n\n        // Generate a tiny preview for blur placeholder if needed\n        if (placeholder === \"blur\") {\n          const tinyUrl = await client.getImageUrl({\n            src,\n            width: 20, // Very small for data URL\n            quality: 20,\n            format: \"webp\",\n            blur: 10,\n          });\n\n          // Fetch the tiny image and convert to base64\n          const response = await fetch(tinyUrl);\n          const buffer = await response.arrayBuffer();\n          const base64 = Buffer.from(buffer).toString(\"base64\");\n          const dataUrl = `data:image/webp;base64,${base64}`;\n\n          setBlurDataUrl(dataUrl);\n        }\n\n        setIsLoading(false);\n      } catch (err) {\n        console.error(\"Failed to load image:\", err);\n        setIsLoading(false);\n      }\n    };\n\n    loadImage();\n  }, [\n    client,\n    ready,\n    src,\n    width,\n    height,\n    quality,\n    format,\n    blur,\n    sharpen,\n    brightness,\n    contrast,\n    saturation,\n    hue,\n    placeholder,\n  ]);\n\n  if (isLoading || !imageUrl) {\n    return (\n      <div\n        style={{\n          width: width || \"100%\",\n          height: height || \"300px\",\n          backgroundColor: \"#f0f0f0\",\n        }}\n      />\n    );\n  }\n\n  // Use Next.js Image component with our optimized URL\n  return (\n    <Image\n      src={imageUrl}\n      alt={alt}\n      width={width}\n      height={height}\n      blurDataURL={blurDataUrl}\n      placeholder={placeholder}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * VisionFly enhanced Next.js responsive Image component\n * @param {Object} props - Component props\n */\nexport function VFNextResponsiveImage({\n  src,\n  widths,\n  sizes,\n  quality,\n  format,\n  fill = true,\n  alt = \"\",\n  placeholder = \"blur\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [srcsetData, setSrcsetData] = useState(null);\n  const [blurDataUrl, setBlurDataUrl] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Generate srcset and blur placeholder\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    const loadSrcset = async () => {\n      try {\n        const data = await client.getSrcSet({\n          src,\n          widths,\n          format,\n          quality,\n        });\n\n        setSrcsetData(data);\n\n        // Generate a tiny preview for blur placeholder if needed\n        if (placeholder === \"blur\") {\n          const tinyUrl = await client.getImageUrl({\n            src,\n            width: 20,\n            quality: 20,\n            format: \"webp\",\n            blur: 10,\n          });\n\n          // Fetch the tiny image and convert to base64\n          const response = await fetch(tinyUrl);\n          const buffer = await response.arrayBuffer();\n          const base64 = Buffer.from(buffer).toString(\"base64\");\n          const dataUrl = `data:image/webp;base64,${base64}`;\n\n          setBlurDataUrl(dataUrl);\n        }\n\n        setIsLoading(false);\n      } catch (err) {\n        console.error(\"Failed to load srcset:\", err);\n        setIsLoading(false);\n      }\n    };\n\n    loadSrcset();\n  }, [\n    client,\n    ready,\n    src,\n    widths && JSON.stringify(widths),\n    quality,\n    format,\n    placeholder,\n  ]);\n\n  if (isLoading || !srcsetData) {\n    return (\n      <div\n        style={{\n          position: fill ? \"relative\" : \"static\",\n          width: \"100%\",\n          height: fill ? \"100%\" : \"300px\",\n          backgroundColor: \"#f0f0f0\",\n        }}\n      />\n    );\n  }\n\n  // For Next.js Image, we use imageSizes, deviceSizes, and loader\n  return (\n    <Image\n      src={srcsetData.default}\n      alt={alt}\n      blurDataURL={blurDataUrl}\n      placeholder={placeholder}\n      fill={fill}\n      sizes={sizes || srcsetData.sizes}\n      loader={({ src, width }) => {\n        // Parse the URL to extract the parameters\n        const url = new URL(src);\n        const params = Object.fromEntries(url.searchParams.entries());\n\n        // Override the width if provided\n        if (width) {\n          params.w = width;\n        }\n\n        // Rebuild the URL with the new width\n        const newParams = new URLSearchParams(params);\n        return `${url.origin}${url.pathname}?${newParams.toString()}`;\n      }}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * Setup VisionFly for Next.js app\n * @param {Object} config - VisionFly configuration\n * @param {Object} options - Additional options\n * @returns {Object} Next.js loader and other utilities\n */\nexport function setupVisionFly(config, options = {}) {\n  // Create loader function for Next.js Image\n  const imageLoader = ({ src, width, quality }) => {\n    // If src is already a VisionFly URL, just use it\n    if (src.includes(config.baseUrl || \"api.visionfly.ai\")) {\n      return src;\n    }\n\n    // Otherwise, construct a VisionFly URL\n    const baseUrl = config.baseUrl || \"https://api.visionfly.ai\";\n\n    // Create a URL with the necessary parameters\n    const params = new URLSearchParams({\n      src,\n      w: width || \"\",\n      q: quality || 80,\n      f: options.defaultFormat || \"auto\",\n    });\n\n    return `${baseUrl}/transform?${params.toString()}`;\n  };\n\n  // Return utilities\n  return {\n    imageLoader,\n    // Additional utility functions could be added here\n  };\n}\n"],"names":["VisionFlyContext","createContext","useVisionFly","context","useContext","Error","VFNextImage","_ref","src","width","height","quality","format","blur","sharpen","brightness","contrast","saturation","hue","alt","placeholder","restProps","_objectWithoutPropertiesLoose","_excluded","client","ready","imageUrl","setImageUrl","useState","blurDataUrl","setBlurDataUrl","isLoading","setIsLoading","useEffect","async","url","getImageUrl","tinyUrl","response","fetch","buffer","arrayBuffer","base64","Buffer","from","toString","err","console","error","loadImage","h","style","backgroundColor","Image","_extends","blurDataURL","VFNextResponsiveImage","_ref2","widths","sizes","fill","_excluded2","srcsetData","setSrcsetData","data","getSrcSet","loadSrcset","JSON","stringify","position","default","loader","URL","params","Object","fromEntries","searchParams","entries","w","newParams","URLSearchParams","origin","pathname","setupVisionFly","config","options","imageLoader","includes","baseUrl","q","f","defaultFormat"],"mappings":"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"}