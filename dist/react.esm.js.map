{"version":3,"file":"react.esm.js","sources":["../src/visionfly-core.js","../src/visionfly-react.jsx"],"sourcesContent":["/**\n * VisionFly - Lightweight Image Optimization SDK\n * @version 1.0.0\n */\n\n/**\n * Core VisionFly client\n */\nclass VisionFly {\n  /**\n   * Initialize VisionFly SDK\n   * @param {Object} config - Configuration options\n   * @param {string} config.apiKey - Your VisionFly API key\n   * @param {string} config.apiSecret - Your VisionFly API secret\n   * @param {string} [config.baseUrl='https://api.visionfly.ai'] - Base API URL\n   * @param {string} [config.cdnUrl='https://cdn.visionfly.ai'] - CDN URL\n   */\n  constructor({\n    apiKey,\n    apiSecret,\n    baseUrl = \"https://api.visionfly.ai\",\n    cdnUrl = \"https://cdn.visionfly.ai\",\n  }) {\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n    this.baseUrl = baseUrl;\n    this.cdnUrl = cdnUrl;\n    this.token = null;\n    this.tokenExpiry = null;\n    this.refreshToken = null;\n\n    // Cache for transformed URLs\n    this.urlCache = new Map();\n  }\n\n  /**\n   * Internal method to handle authentication\n   * @private\n   */\n  async _ensureAuthenticated() {\n    // If token exists and is valid, return\n    if (this.token && this.tokenExpiry && this.tokenExpiry > Date.now()) {\n      return;\n    }\n\n    // If token expired or not set, authenticate\n    await this._authenticate();\n  }\n\n  /**\n   * Authenticate with the API\n   * @private\n   */\n  async _authenticate() {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/login`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          api_key: this.apiKey,\n          api_secret: this.apiSecret,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.msg || \"Authentication failed\");\n      }\n\n      const data = await response.json();\n      this.token = data.access_token;\n      this.refreshToken = data.refresh_token;\n      // Set expiry 5 minutes before actual expiry as a buffer\n      this.tokenExpiry = Date.now() + data.expires_in * 1000 - 5 * 60 * 1000;\n    } catch (error) {\n      console.error(\"VisionFly authentication error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Refresh the auth token\n   * @private\n   */\n  async _refreshToken() {\n    try {\n      const response = await fetch(`${this.baseUrl}/auth/refresh`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          refresh_token: this.refreshToken,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.msg || \"Token refresh failed\");\n      }\n\n      const data = await response.json();\n      this.token = data.access_token;\n      this.refreshToken = data.refresh_token;\n      this.tokenExpiry = Date.now() + data.expires_in * 1000 - 5 * 60 * 1000;\n    } catch (error) {\n      console.error(\"VisionFly token refresh error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make an authenticated request to the API\n   * @private\n   * @param {string} endpoint - API endpoint\n   * @param {Object} options - Fetch options\n   * @returns {Promise<Object>} Response data\n   */\n  async _request(endpoint, options = {}) {\n    await this._ensureAuthenticated();\n\n    const defaultOptions = {\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n      },\n    };\n\n    const fullOptions = {\n      ...defaultOptions,\n      ...options,\n      headers: {\n        ...defaultOptions.headers,\n        ...options.headers,\n      },\n    };\n\n    try {\n      let response = await fetch(`${this.baseUrl}${endpoint}`, fullOptions);\n\n      // Handle token expiration\n      if (response.status === 401) {\n        await this._refreshToken();\n        fullOptions.headers.Authorization = `Bearer ${this.token}`;\n        response = await fetch(`${this.baseUrl}${endpoint}`, fullOptions);\n      }\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(\n          error.msg || `Request failed with status ${response.status}`\n        );\n      }\n\n      return response.json();\n    } catch (error) {\n      console.error(\"VisionFly request error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get a CDN URL for an image with transformations\n   * @param {Object} params - Transformation parameters\n   * @param {string} params.src - Source image URL\n   * @param {number} [params.width] - Width in pixels\n   * @param {number} [params.height] - Height in pixels\n   * @param {number} [params.quality=80] - Image quality (1-100)\n   * @param {string} [params.format='auto'] - Output format (auto, webp, avif, jpeg, png)\n   * @param {number} [params.blur] - Blur amount (0-100)\n   * @param {number} [params.sharpen] - Sharpen amount (0-100)\n   * @param {number} [params.brightness] - Brightness adjustment (-100 to 100)\n   * @param {number} [params.contrast] - Contrast adjustment (-100 to 100)\n   * @param {number} [params.saturation] - Saturation adjustment (-100 to 100)\n   * @param {number} [params.hue] - Hue rotation (0-360)\n   * @returns {Promise<string>} CDN URL\n   */\n  async getImageUrl(params) {\n    // Generate a cache key from the params\n    const cacheKey = JSON.stringify(params);\n\n    // Check cache first\n    if (this.urlCache.has(cacheKey)) {\n      return this.urlCache.get(cacheKey);\n    }\n\n    // Build query for the API\n    const apiParams = new URLSearchParams();\n\n    // Map user-friendly param names to API param names\n    const paramMap = {\n      src: \"src\",\n      width: \"w\",\n      height: \"h\",\n      quality: \"q\",\n      format: \"f\",\n      blur: \"blur\",\n      sharpen: \"sharp\",\n      brightness: \"bri\",\n      contrast: \"con\",\n      saturation: \"sat\",\n      hue: \"hue\",\n    };\n\n    // Add all params to query\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        const apiKey = paramMap[key] || key;\n        apiParams.append(apiKey, value);\n      }\n    });\n\n    // Get the transformed URL from the API\n    const endpoint = `/transform?${apiParams.toString()}`;\n    const result = await this._request(endpoint);\n\n    if (!result.public_url) {\n      throw new Error(\"Transform API did not return a public_url\");\n    }\n\n    // Cache the result\n    this.urlCache.set(cacheKey, result.public_url);\n\n    return result.public_url;\n  }\n\n  /**\n   * Generate a responsive srcset for an image\n   * @param {Object} params - Srcset parameters\n   * @param {string} params.src - Source image URL\n   * @param {Array<number>|string} [params.widths=[400,800,1200]] - Array or comma-separated string of widths\n   * @param {string} [params.format='auto'] - Output format\n   * @param {number} [params.quality=80] - Image quality\n   * @returns {Promise<Object>} Srcset data with processed URLs\n   */\n  async getSrcSet(params) {\n    const {\n      src,\n      widths = [400, 800, 1200],\n      format = \"auto\",\n      quality = 80,\n    } = params;\n\n    // Convert widths array to string if needed\n    const widthsStr = Array.isArray(widths) ? widths.join(\",\") : widths;\n\n    // Get srcset data from API\n    const apiParams = new URLSearchParams({\n      src,\n      w: widthsStr,\n      f: format,\n      q: quality,\n    });\n\n    const srcsetData = await this._request(\n      `/generate/srcset?${apiParams.toString()}`\n    );\n\n    // Process each URL in the srcset to get actual CDN URLs\n    const srcsetParts = srcsetData.srcset.split(\",\").map((part) => part.trim());\n    const processedParts = await Promise.all(\n      srcsetParts.map(async (part) => {\n        // Split part into URL and width descriptor\n        const [url, widthDesc] = part.split(\" \");\n\n        // Parse URL to get transform parameters\n        const urlObj = new URL(url);\n        const transformParams = {};\n\n        // Convert API params back to SDK format\n        const reverseParamMap = {\n          src: \"src\",\n          w: \"width\",\n          h: \"height\",\n          q: \"quality\",\n          f: \"format\",\n          blur: \"blur\",\n          sharp: \"sharpen\",\n          bri: \"brightness\",\n          con: \"contrast\",\n          sat: \"saturation\",\n          hue: \"hue\",\n        };\n\n        // Extract params from URL\n        for (const [key, value] of urlObj.searchParams.entries()) {\n          const paramKey = reverseParamMap[key] || key;\n          transformParams[paramKey] = value;\n        }\n\n        // Get CDN URL for this width\n        const cdnUrl = await this.getImageUrl(transformParams);\n\n        // Return new srcset entry with CDN URL\n        return `${cdnUrl} ${widthDesc}`;\n      })\n    );\n\n    // Process default URL\n    const defaultUrlObj = new URL(srcsetData.default);\n    const defaultParams = {};\n\n    // Convert API params back to SDK format for default URL\n    const reverseParamMap = {\n      src: \"src\",\n      w: \"width\",\n      h: \"height\",\n      q: \"quality\",\n      f: \"format\",\n      blur: \"blur\",\n      sharp: \"sharpen\",\n      bri: \"brightness\",\n      con: \"contrast\",\n      sat: \"saturation\",\n      hue: \"hue\",\n    };\n\n    // Extract params from default URL\n    for (const [key, value] of defaultUrlObj.searchParams.entries()) {\n      const paramKey = reverseParamMap[key] || key;\n      defaultParams[paramKey] = value;\n    }\n\n    // Get CDN URL for default\n    const defaultCdnUrl = await this.getImageUrl(defaultParams);\n\n    // Return processed srcset data\n    return {\n      srcset: processedParts.join(\", \"),\n      sizes: srcsetData.sizes,\n      default: defaultCdnUrl,\n    };\n  }\n\n  /**\n   * Upload an image to VisionFly\n   * @param {Object} params - Upload parameters\n   * @param {File|Blob} params.file - Image file to upload\n   * @param {string} params.projectId - Project ID\n   * @param {string} [params.publicId] - Optional custom public ID\n   * @returns {Promise<Object>} Upload result\n   */\n  async uploadImage(params) {\n    const { file, projectId, publicId } = params;\n\n    // Create form data\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"project_id\", projectId);\n\n    if (publicId) {\n      formData.append(\"public_id\", publicId);\n    }\n\n    // Upload the image\n    return this._request(\"/upload/\", {\n      method: \"POST\",\n      body: formData,\n      // Don't set Content-Type header for FormData\n      headers: {},\n    });\n  }\n\n  /**\n   * Clear URL cache\n   */\n  clearCache() {\n    this.urlCache.clear();\n  }\n}\n\nexport { VisionFly };\n","import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from \"react\";\nimport { VisionFly } from \"./visionfly-core\";\n\n// Create VisionFly context\nconst VisionFlyContext = createContext(null);\n\n/**\n * VisionFly Provider component\n * @param {Object} props - Component props\n * @param {Object} props.config - VisionFly configuration\n * @param {React.ReactNode} props.children - Child components\n */\nconst VisionFlyProvider = ({ config, children }) => {\n  const [client] = useState(() => new VisionFly(config));\n  const [ready, setReady] = useState(false);\n\n  // Initialize the client\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Trigger authentication\n        await client._ensureAuthenticated();\n        setReady(true);\n      } catch (error) {\n        console.error(\"Failed to initialize VisionFly client:\", error);\n      }\n    };\n\n    init();\n  }, [client]);\n\n  // Context value\n  const contextValue = {\n    client,\n    ready,\n  };\n\n  return (\n    <VisionFlyContext.Provider value={contextValue}>\n      {children}\n    </VisionFlyContext.Provider>\n  );\n};\n\n/**\n * Hook to access VisionFly client\n * @returns {Object} VisionFly context\n */\nconst useVisionFly = () => {\n  const context = useContext(VisionFlyContext);\n\n  if (!context) {\n    throw new Error(\"useVisionFly must be used within a VisionFlyProvider\");\n  }\n\n  return context;\n};\n\n/**\n * Image component with optimization\n * @param {Object} props - Component props\n */\nconst VFImage = ({\n  src,\n  width,\n  height,\n  quality,\n  format,\n  blur,\n  sharpen,\n  brightness,\n  contrast,\n  saturation,\n  hue,\n  alt = \"\",\n  className = \"\",\n  style = {},\n  loading = \"lazy\",\n  ...restProps\n}) => {\n  const { client, ready } = useVisionFly();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get optimized image URL\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    let isMounted = true;\n    setIsLoading(true);\n\n    const loadImage = async () => {\n      try {\n        const url = await client.getImageUrl({\n          src,\n          width,\n          height,\n          quality,\n          format,\n          blur,\n          sharpen,\n          brightness,\n          contrast,\n          saturation,\n          hue,\n        });\n\n        if (isMounted) {\n          setImageUrl(url);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Failed to load image:\", err);\n          setError(err);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadImage();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    client,\n    ready,\n    src,\n    width,\n    height,\n    quality,\n    format,\n    blur,\n    sharpen,\n    brightness,\n    contrast,\n    saturation,\n    hue,\n  ]);\n\n  // Placeholder while loading\n  if (isLoading) {\n    return (\n      <div\n        className={`vf-image-placeholder ${className}`}\n        style={{\n          width: width ? `${width}px` : \"100%\",\n          height: height ? `${height}px` : \"auto\",\n          backgroundColor: \"#f0f0f0\",\n          ...style,\n        }}\n        {...restProps}\n      />\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div\n        className={`vf-image-error ${className}`}\n        style={{\n          width: width ? `${width}px` : \"100%\",\n          height: height ? `${height}px` : \"auto\",\n          backgroundColor: \"#ff5555\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\",\n          ...style,\n        }}\n        {...restProps}\n      >\n        Error loading image\n      </div>\n    );\n  }\n\n  // Render optimized image\n  return (\n    <img\n      src={imageUrl}\n      alt={alt}\n      width={width}\n      height={height}\n      loading={loading}\n      className={`vf-image ${className}`}\n      style={style}\n      {...restProps}\n    />\n  );\n};\n\n/**\n * Responsive image component with srcset\n * @param {Object} props - Component props\n */\nconst VFResponsiveImage = ({\n  src,\n  widths,\n  sizes,\n  quality,\n  format,\n  alt = \"\",\n  className = \"\",\n  style = {},\n  loading = \"lazy\",\n  ...restProps\n}) => {\n  const { client, ready } = useVisionFly();\n  const [srcsetData, setSrcsetData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get srcset data\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    let isMounted = true;\n    setIsLoading(true);\n\n    const loadSrcset = async () => {\n      try {\n        const data = await client.getSrcSet({\n          src,\n          widths,\n          format,\n          quality,\n        });\n\n        if (isMounted) {\n          setSrcsetData(data);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Failed to load srcset:\", err);\n          setError(err);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadSrcset();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    client,\n    ready,\n    src,\n    widths && JSON.stringify(widths),\n    sizes,\n    quality,\n    format,\n  ]);\n\n  // Placeholder while loading\n  if (isLoading) {\n    return (\n      <div\n        className={`vf-image-placeholder ${className}`}\n        style={{\n          width: \"100%\",\n          height: \"300px\",\n          backgroundColor: \"#f0f0f0\",\n          ...style,\n        }}\n        {...restProps}\n      />\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div\n        className={`vf-image-error ${className}`}\n        style={{\n          width: \"100%\",\n          height: \"300px\",\n          backgroundColor: \"#ff5555\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\",\n          ...style,\n        }}\n        {...restProps}\n      >\n        Error loading image\n      </div>\n    );\n  }\n\n  // Render responsive image\n  return (\n    <img\n      src={srcsetData.default}\n      srcSet={srcsetData.srcset}\n      sizes={sizes || srcsetData.sizes}\n      alt={alt}\n      loading={loading}\n      className={`vf-responsive-image ${className}`}\n      style={style}\n      {...restProps}\n    />\n  );\n};\n\n/**\n * Image uploader component\n * @param {Object} props - Component props\n */\nconst VFUploader = ({\n  projectId,\n  onUpload,\n  onError,\n  publicId,\n  multiple = false,\n  className = \"\",\n  style = {},\n  buttonClassName = \"\",\n  buttonStyle = {},\n  buttonText = \"Upload Image\",\n  children,\n  ...restProps\n}) => {\n  const { client, ready } = useVisionFly();\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef(null);\n\n  // Handle file selection\n  const handleFileChange = useCallback(\n    async (event) => {\n      const files = event.target.files;\n      if (!files || files.length === 0) return;\n\n      setIsUploading(true);\n\n      try {\n        // Handle multiple files\n        if (multiple) {\n          const results = await Promise.all(\n            Array.from(files).map((file) =>\n              client.uploadImage({\n                file,\n                projectId,\n                publicId: publicId || undefined,\n              })\n            )\n          );\n\n          setIsUploading(false);\n          if (onUpload) onUpload(results);\n        }\n        // Handle single file\n        else {\n          const result = await client.uploadImage({\n            file: files[0],\n            projectId,\n            publicId: publicId || undefined,\n          });\n\n          setIsUploading(false);\n          if (onUpload) onUpload(result);\n        }\n\n        // Clear the file input\n        if (fileInputRef.current) {\n          fileInputRef.current.value = \"\";\n        }\n      } catch (err) {\n        setIsUploading(false);\n        console.error(\"Upload failed:\", err);\n        if (onError) onError(err);\n      }\n    },\n    [client, projectId, publicId, multiple, onUpload, onError]\n  );\n\n  // Custom button or default\n  const uploadButton = children || (\n    <button\n      type=\"button\"\n      className={`vf-upload-button ${buttonClassName}`}\n      style={buttonStyle}\n      disabled={isUploading || !ready}\n    >\n      {isUploading ? \"Uploading...\" : buttonText}\n    </button>\n  );\n\n  return (\n    <div className={`vf-uploader ${className}`} style={style} {...restProps}>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        multiple={multiple}\n        onChange={handleFileChange}\n        style={{ display: \"none\" }}\n        id=\"vf-file-input\"\n      />\n      <label htmlFor=\"vf-file-input\">{uploadButton}</label>\n    </div>\n  );\n};\n\n// Export everything\nexport {\n  VisionFlyProvider,\n  useVisionFly,\n  VFImage,\n  VFResponsiveImage,\n  VFUploader,\n};\n"],"names":["VisionFly","constructor","apiKey","apiSecret","baseUrl","cdnUrl","this","token","tokenExpiry","refreshToken","urlCache","Map","_ensureAuthenticated","Date","now","_authenticate","response","fetch","method","headers","body","JSON","stringify","api_key","api_secret","ok","error","json","Error","msg","data","access_token","refresh_token","expires_in","console","_refreshToken","_request","endpoint","options","defaultOptions","Authorization","fullOptions","status","getImageUrl","params","cacheKey","has","get","apiParams","URLSearchParams","paramMap","src","width","height","quality","format","blur","sharpen","brightness","contrast","saturation","hue","Object","entries","forEach","key","value","append","toString","result","public_url","set","getSrcSet","widths","widthsStr","Array","isArray","join","w","f","q","srcsetData","srcsetParts","srcset","split","map","part","trim","processedParts","Promise","all","async","url","widthDesc","urlObj","URL","transformParams","reverseParamMap","h","sharp","bri","con","sat","searchParams","defaultUrlObj","default","defaultParams","defaultCdnUrl","sizes","uploadImage","file","projectId","publicId","formData","FormData","clearCache","clear","VisionFlyContext","createContext","VisionFlyProvider","config","children","client","useState","ready","setReady","useEffect","init","contextValue","React","createElement","Provider","useVisionFly","context","useContext","VFImage","alt","className","style","loading","restProps","imageUrl","setImageUrl","isLoading","setIsLoading","setError","isMounted","err","loadImage","_extends","backgroundColor","display","alignItems","justifyContent","color","VFResponsiveImage","setSrcsetData","loadSrcset","srcSet","VFUploader","onUpload","onError","multiple","buttonClassName","buttonStyle","buttonText","isUploading","setIsUploading","fileInputRef","useRef","handleFileChange","useCallback","files","event","target","length","results","from","undefined","current","uploadButton","type","disabled","ref","accept","onChange","id","htmlFor"],"mappings":"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"}