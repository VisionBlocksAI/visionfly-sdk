class t{constructor({apiKey:t,apiSecret:e,baseUrl:r="https://api.visionfly.ai",cdnUrl:s="https://cdn.visionfly.ai"}){this.apiKey=t,this.apiSecret=e,this.baseUrl=r,this.cdnUrl=s,this.token=null,this.tokenExpiry=null,this.refreshToken=null,this.urlCache=new Map}async _ensureAuthenticated(){this.token&&this.tokenExpiry&&this.tokenExpiry>Date.now()||await this._authenticate()}async _authenticate(){try{const t=await fetch(`${this.baseUrl}/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({api_key:this.apiKey,api_secret:this.apiSecret})});if(!t.ok){const e=await t.json();throw new Error(e.msg||"Authentication failed")}const e=await t.json();this.token=e.access_token,this.refreshToken=e.refresh_token,this.tokenExpiry=Date.now()+1e3*e.expires_in-3e5}catch(t){throw console.error("VisionFly authentication error:",t),t}}async _refreshToken(){try{const t=await fetch(`${this.baseUrl}/auth/refresh`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refresh_token:this.refreshToken})});if(!t.ok){const e=await t.json();throw new Error(e.msg||"Token refresh failed")}const e=await t.json();this.token=e.access_token,this.refreshToken=e.refresh_token,this.tokenExpiry=Date.now()+1e3*e.expires_in-3e5}catch(t){throw console.error("VisionFly token refresh error:",t),t}}async _request(t,e={}){await this._ensureAuthenticated();const r={headers:{Authorization:`Bearer ${this.token}`}},s={...r,...e,headers:{...r.headers,...e.headers}};try{let e=await fetch(`${this.baseUrl}${t}`,s);if(401===e.status&&(await this._refreshToken(),s.headers.Authorization=`Bearer ${this.token}`,e=await fetch(`${this.baseUrl}${t}`,s)),!e.ok){const t=await e.json();throw new Error(t.msg||`Request failed with status ${e.status}`)}return e.json()}catch(t){throw console.error("VisionFly request error:",t),t}}async getImageUrl(t){const e=JSON.stringify(t);if(this.urlCache.has(e))return this.urlCache.get(e);const r=new URLSearchParams,s={src:"src",width:"w",height:"h",quality:"q",format:"f",blur:"blur",sharpen:"sharp",brightness:"bri",contrast:"con",saturation:"sat",hue:"hue"};Object.entries(t).forEach((([t,e])=>{if(null!=e){const a=s[t]||t;r.append(a,e)}}));const a=`/transform?${r.toString()}`,i=await this._request(a);if(!i.public_url)throw new Error("Transform API did not return a public_url");return this.urlCache.set(e,i.public_url),i.public_url}async getSrcSet(t){const{src:e,widths:r=[400,800,1200],format:s="auto",quality:a=80}=t,i=Array.isArray(r)?r.join(","):r,n=new URLSearchParams({src:e,w:i,f:s,q:a}),o=await this._request(`/generate/srcset?${n.toString()}`),h=o.srcset.split(",").map((t=>t.trim())),c=await Promise.all(h.map((async t=>{const[e,r]=t.split(" "),s=new URL(e),a={},i={src:"src",w:"width",h:"height",q:"quality",f:"format",blur:"blur",sharp:"sharpen",bri:"brightness",con:"contrast",sat:"saturation",hue:"hue"};for(const[t,e]of s.searchParams.entries()){a[i[t]||t]=e}return`${await this.getImageUrl(a)} ${r}`}))),l=new URL(o.default),u={},p={src:"src",w:"width",h:"height",q:"quality",f:"format",blur:"blur",sharp:"sharpen",bri:"brightness",con:"contrast",sat:"saturation",hue:"hue"};for(const[t,e]of l.searchParams.entries()){u[p[t]||t]=e}const f=await this.getImageUrl(u);return{srcset:c.join(", "),sizes:o.sizes,default:f}}async uploadImage(t){const{file:e,projectId:r,publicId:s}=t,a=new FormData;return a.append("file",e),a.append("project_id",r),s&&a.append("public_id",s),this._request("/upload/",{method:"POST",body:a,headers:{}})}clearCache(){this.urlCache.clear()}}export{t as VisionFly};
//# sourceMappingURL=index.esm.js.map
