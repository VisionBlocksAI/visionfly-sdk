{"version":3,"file":"next.js","sources":["../src/visionfly-react.js","../src/visionfly-next.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from \"react\";\nimport VisionFly from \"./visionfly-core\";\n\n// Create VisionFly context\nconst VisionFlyContext = createContext(null);\n\n/**\n * VisionFly Provider component\n * @param {Object} props - Component props\n * @param {Object} props.config - VisionFly configuration\n * @param {React.ReactNode} props.children - Child components\n */\nexport function VisionFlyProvider({ config, children }) {\n  const [client] = useState(() => new VisionFly(config));\n  const [ready, setReady] = useState(false);\n\n  // Initialize the client\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Trigger authentication\n        await client._ensureAuthenticated();\n        setReady(true);\n      } catch (error) {\n        console.error(\"Failed to initialize VisionFly client:\", error);\n      }\n    };\n\n    init();\n  }, [client]);\n\n  // Context value\n  const contextValue = {\n    client,\n    ready,\n  };\n\n  return (\n    <VisionFlyContext.Provider value={contextValue}>\n      {children}\n    </VisionFlyContext.Provider>\n  );\n}\n\n/**\n * Hook to access VisionFly client\n * @returns {Object} VisionFly context\n */\nexport function useVisionFly() {\n  const context = useContext(VisionFlyContext);\n\n  if (!context) {\n    throw new Error(\"useVisionFly must be used within a VisionFlyProvider\");\n  }\n\n  return context;\n}\n\n/**\n * Image component with optimization\n * @param {Object} props - Component props\n */\nexport function VFImage({\n  src,\n  width,\n  height,\n  quality,\n  format,\n  blur,\n  sharpen,\n  brightness,\n  contrast,\n  saturation,\n  hue,\n  alt = \"\",\n  className = \"\",\n  style = {},\n  loading = \"lazy\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get optimized image URL\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    let isMounted = true;\n    setIsLoading(true);\n\n    const loadImage = async () => {\n      try {\n        const url = await client.getImageUrl({\n          src,\n          width,\n          height,\n          quality,\n          format,\n          blur,\n          sharpen,\n          brightness,\n          contrast,\n          saturation,\n          hue,\n        });\n\n        if (isMounted) {\n          setImageUrl(url);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Failed to load image:\", err);\n          setError(err);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadImage();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    client,\n    ready,\n    src,\n    width,\n    height,\n    quality,\n    format,\n    blur,\n    sharpen,\n    brightness,\n    contrast,\n    saturation,\n    hue,\n  ]);\n\n  // Placeholder while loading\n  if (isLoading) {\n    return (\n      <div\n        className={`vf-image-placeholder ${className}`}\n        style={{\n          width: width ? `${width}px` : \"100%\",\n          height: height ? `${height}px` : \"auto\",\n          backgroundColor: \"#f0f0f0\",\n          ...style,\n        }}\n        {...restProps}\n      />\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div\n        className={`vf-image-error ${className}`}\n        style={{\n          width: width ? `${width}px` : \"100%\",\n          height: height ? `${height}px` : \"auto\",\n          backgroundColor: \"#ff5555\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\",\n          ...style,\n        }}\n        {...restProps}\n      >\n        Error loading image\n      </div>\n    );\n  }\n\n  // Render optimized image\n  return (\n    <img\n      src={imageUrl}\n      alt={alt}\n      width={width}\n      height={height}\n      loading={loading}\n      className={`vf-image ${className}`}\n      style={style}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * Responsive image component with srcset\n * @param {Object} props - Component props\n */\nexport function VFResponsiveImage({\n  src,\n  widths,\n  sizes,\n  quality,\n  format,\n  alt = \"\",\n  className = \"\",\n  style = {},\n  loading = \"lazy\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [srcsetData, setSrcsetData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Get srcset data\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    let isMounted = true;\n    setIsLoading(true);\n\n    const loadSrcset = async () => {\n      try {\n        const data = await client.getSrcSet({\n          src,\n          widths,\n          format,\n          quality,\n        });\n\n        if (isMounted) {\n          setSrcsetData(data);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        if (isMounted) {\n          console.error(\"Failed to load srcset:\", err);\n          setError(err);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadSrcset();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    client,\n    ready,\n    src,\n    widths && JSON.stringify(widths),\n    sizes,\n    quality,\n    format,\n  ]);\n\n  // Placeholder while loading\n  if (isLoading) {\n    return (\n      <div\n        className={`vf-image-placeholder ${className}`}\n        style={{\n          width: \"100%\",\n          height: \"300px\",\n          backgroundColor: \"#f0f0f0\",\n          ...style,\n        }}\n        {...restProps}\n      />\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div\n        className={`vf-image-error ${className}`}\n        style={{\n          width: \"100%\",\n          height: \"300px\",\n          backgroundColor: \"#ff5555\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\",\n          ...style,\n        }}\n        {...restProps}\n      >\n        Error loading image\n      </div>\n    );\n  }\n\n  // Render responsive image\n  return (\n    <img\n      src={srcsetData.default}\n      srcSet={srcsetData.srcset}\n      sizes={sizes || srcsetData.sizes}\n      alt={alt}\n      loading={loading}\n      className={`vf-responsive-image ${className}`}\n      style={style}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * Image uploader component\n * @param {Object} props - Component props\n */\nexport function VFUploader({\n  projectId,\n  onUpload,\n  onError,\n  publicId,\n  multiple = false,\n  className = \"\",\n  style = {},\n  buttonClassName = \"\",\n  buttonStyle = {},\n  buttonText = \"Upload Image\",\n  children,\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef(null);\n\n  // Handle file selection\n  const handleFileChange = useCallback(\n    async (event) => {\n      const files = event.target.files;\n      if (!files || files.length === 0) return;\n\n      setIsUploading(true);\n\n      try {\n        // Handle multiple files\n        if (multiple) {\n          const results = await Promise.all(\n            Array.from(files).map((file) =>\n              client.uploadImage({\n                file,\n                projectId,\n                publicId: publicId || undefined,\n              })\n            )\n          );\n\n          setIsUploading(false);\n          if (onUpload) onUpload(results);\n        }\n        // Handle single file\n        else {\n          const result = await client.uploadImage({\n            file: files[0],\n            projectId,\n            publicId: publicId || undefined,\n          });\n\n          setIsUploading(false);\n          if (onUpload) onUpload(result);\n        }\n\n        // Clear the file input\n        if (fileInputRef.current) {\n          fileInputRef.current.value = \"\";\n        }\n      } catch (err) {\n        setIsUploading(false);\n        console.error(\"Upload failed:\", err);\n        if (onError) onError(err);\n      }\n    },\n    [client, projectId, publicId, multiple, onUpload, onError]\n  );\n\n  // Custom button or default\n  const uploadButton = children || (\n    <button\n      type=\"button\"\n      className={`vf-upload-button ${buttonClassName}`}\n      style={buttonStyle}\n      disabled={isUploading || !ready}\n    >\n      {isUploading ? \"Uploading...\" : buttonText}\n    </button>\n  );\n\n  return (\n    <div className={`vf-uploader ${className}`} style={style} {...restProps}>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        multiple={multiple}\n        onChange={handleFileChange}\n        style={{ display: \"none\" }}\n        id=\"vf-file-input\"\n      />\n      <label htmlFor=\"vf-file-input\">{uploadButton}</label>\n    </div>\n  );\n}\n\n// Export everything\nexport default {\n  VisionFlyProvider,\n  useVisionFly,\n  VFImage,\n  VFResponsiveImage,\n  VFUploader,\n};\n","import { useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport { useVisionFly } from \"./visionfly-react\";\n\n/**\n * VisionFly enhanced Next.js Image component\n * @param {Object} props - Component props\n */\nexport function VFNextImage({\n  src,\n  width,\n  height,\n  quality,\n  format,\n  blur,\n  sharpen,\n  brightness,\n  contrast,\n  saturation,\n  hue,\n  alt = \"\",\n  placeholder = \"blur\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [blurDataUrl, setBlurDataUrl] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Generate tiny preview for blur placeholder\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    const loadImage = async () => {\n      try {\n        // Get optimized image URL\n        const url = await client.getImageUrl({\n          src,\n          width,\n          height,\n          quality,\n          format,\n          blur,\n          sharpen,\n          brightness,\n          contrast,\n          saturation,\n          hue,\n        });\n\n        setImageUrl(url);\n\n        // Generate a tiny preview for blur placeholder if needed\n        if (placeholder === \"blur\") {\n          const tinyUrl = await client.getImageUrl({\n            src,\n            width: 20, // Very small for data URL\n            quality: 20,\n            format: \"webp\",\n            blur: 10,\n          });\n\n          // Fetch the tiny image and convert to base64\n          const response = await fetch(tinyUrl);\n          const buffer = await response.arrayBuffer();\n          const base64 = Buffer.from(buffer).toString(\"base64\");\n          const dataUrl = `data:image/webp;base64,${base64}`;\n\n          setBlurDataUrl(dataUrl);\n        }\n\n        setIsLoading(false);\n      } catch (err) {\n        console.error(\"Failed to load image:\", err);\n        setIsLoading(false);\n      }\n    };\n\n    loadImage();\n  }, [\n    client,\n    ready,\n    src,\n    width,\n    height,\n    quality,\n    format,\n    blur,\n    sharpen,\n    brightness,\n    contrast,\n    saturation,\n    hue,\n    placeholder,\n  ]);\n\n  if (isLoading || !imageUrl) {\n    return (\n      <div\n        style={{\n          width: width || \"100%\",\n          height: height || \"300px\",\n          backgroundColor: \"#f0f0f0\",\n        }}\n      />\n    );\n  }\n\n  // Use Next.js Image component with our optimized URL\n  return (\n    <Image\n      src={imageUrl}\n      alt={alt}\n      width={width}\n      height={height}\n      blurDataURL={blurDataUrl}\n      placeholder={placeholder}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * VisionFly enhanced Next.js responsive Image component\n * @param {Object} props - Component props\n */\nexport function VFNextResponsiveImage({\n  src,\n  widths,\n  sizes,\n  quality,\n  format,\n  fill = true,\n  alt = \"\",\n  placeholder = \"blur\",\n  ...restProps\n}) {\n  const { client, ready } = useVisionFly();\n  const [srcsetData, setSrcsetData] = useState(null);\n  const [blurDataUrl, setBlurDataUrl] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Generate srcset and blur placeholder\n  useEffect(() => {\n    if (!ready || !src) return;\n\n    const loadSrcset = async () => {\n      try {\n        const data = await client.getSrcSet({\n          src,\n          widths,\n          format,\n          quality,\n        });\n\n        setSrcsetData(data);\n\n        // Generate a tiny preview for blur placeholder if needed\n        if (placeholder === \"blur\") {\n          const tinyUrl = await client.getImageUrl({\n            src,\n            width: 20,\n            quality: 20,\n            format: \"webp\",\n            blur: 10,\n          });\n\n          // Fetch the tiny image and convert to base64\n          const response = await fetch(tinyUrl);\n          const buffer = await response.arrayBuffer();\n          const base64 = Buffer.from(buffer).toString(\"base64\");\n          const dataUrl = `data:image/webp;base64,${base64}`;\n\n          setBlurDataUrl(dataUrl);\n        }\n\n        setIsLoading(false);\n      } catch (err) {\n        console.error(\"Failed to load srcset:\", err);\n        setIsLoading(false);\n      }\n    };\n\n    loadSrcset();\n  }, [\n    client,\n    ready,\n    src,\n    widths && JSON.stringify(widths),\n    quality,\n    format,\n    placeholder,\n  ]);\n\n  if (isLoading || !srcsetData) {\n    return (\n      <div\n        style={{\n          position: fill ? \"relative\" : \"static\",\n          width: \"100%\",\n          height: fill ? \"100%\" : \"300px\",\n          backgroundColor: \"#f0f0f0\",\n        }}\n      />\n    );\n  }\n\n  // For Next.js Image, we use imageSizes, deviceSizes, and loader\n  return (\n    <Image\n      src={srcsetData.default}\n      alt={alt}\n      blurDataURL={blurDataUrl}\n      placeholder={placeholder}\n      fill={fill}\n      sizes={sizes || srcsetData.sizes}\n      loader={({ src, width }) => {\n        // Parse the URL to extract the parameters\n        const url = new URL(src);\n        const params = Object.fromEntries(url.searchParams.entries());\n\n        // Override the width if provided\n        if (width) {\n          params.w = width;\n        }\n\n        // Rebuild the URL with the new width\n        const newParams = new URLSearchParams(params);\n        return `${url.origin}${url.pathname}?${newParams.toString()}`;\n      }}\n      {...restProps}\n    />\n  );\n}\n\n/**\n * Setup VisionFly for Next.js app\n * @param {Object} config - VisionFly configuration\n * @param {Object} options - Additional options\n * @returns {Object} Next.js loader and other utilities\n */\nexport function setupVisionFly(config, options = {}) {\n  // Create loader function for Next.js Image\n  const imageLoader = ({ src, width, quality }) => {\n    // If src is already a VisionFly URL, just use it\n    if (src.includes(config.baseUrl || \"api.visionfly.ai\")) {\n      return src;\n    }\n\n    // Otherwise, construct a VisionFly URL\n    const baseUrl = config.baseUrl || \"https://api.visionfly.ai\";\n\n    // Create a URL with the necessary parameters\n    const params = new URLSearchParams({\n      src,\n      w: width || \"\",\n      q: quality || 80,\n      f: options.defaultFormat || \"auto\",\n    });\n\n    return `${baseUrl}/transform?${params.toString()}`;\n  };\n\n  // Return utilities\n  return {\n    imageLoader,\n    // Additional utility functions could be added here\n  };\n}\n"],"names":["VisionFlyContext","createContext","useVisionFly","context","useContext","Error","_excluded","_excluded2","_catch","body","recover","result","e","then","_ref","src","width","height","quality","format","blur","sharpen","brightness","contrast","saturation","hue","_ref$alt","alt","_ref$placeholder","placeholder","restProps","_objectWithoutPropertiesLoose","_useVisionFly","client","ready","_useState","useState","imageUrl","setImageUrl","_useState2","blurDataUrl","setBlurDataUrl","_useState3","isLoading","setIsLoading","useEffect","_temp3","Promise","resolve","getImageUrl","url","_temp2","_temp","tinyUrl","fetch","response","arrayBuffer","buffer","base64","Buffer","from","toString","err","console","error","reject","loadImage","h","style","backgroundColor","Image","_extends","blurDataURL","_ref2","widths","sizes","_ref2$fill","fill","_ref2$alt","_ref2$placeholder","_useVisionFly2","_useState4","srcsetData","setSrcsetData","_useState5","_useState6","_temp6","getSrcSet","data","_temp5","_temp4","loadSrcset","JSON","stringify","position","loader","_ref3","URL","params","Object","fromEntries","searchParams","entries","w","newParams","URLSearchParams","origin","pathname","config","options","imageLoader","_ref4","includes","baseUrl","q","f","defaultFormat"],"mappings":"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"}